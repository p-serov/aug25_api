{
	"info": {
		"_postman_id": "4f42cc51-5bb9-44d8-abe6-de131db81442",
		"name": "ASK - Homework API Variables",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46015279",
		"_collection_link": "https://petrserov.postman.co/workspace/ASK_AUG25~7b519be0-776d-4a81-8495-4cdb50e072ee/collection/46015279-4f42cc51-5bb9-44d8-abe6-de131db81442?action=share&source=collection_link&creator=46015279"
	},
	"item": [
		{
			"name": "Log-in [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"TeacherToken\", jsonData.token);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User is teacher\", function () {\r",
							"    pm.expect(jsonData.user.role).to.eql(\"TEACHER\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"ask_instr@aol.com\",\r\n  \"password\": \"ABC123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/sign-in",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "Log-in [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json(); // Parse the JSON response\r",
							"pm.environment.set(\"StudentToken\", jsonData.token); // Set the token in the environment variables\r",
							"pm.environment.set(\"StudentID\", jsonData.user.id); // Set the user ID in the environment variables\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User ID is correct\", function () {\r",
							"    pm.expect(jsonData.user.id).to.eql(17888);\r",
							"});\r",
							"\r",
							"pm.test(\"User is student\", function () {\r",
							"    pm.expect(jsonData.user.role).to.eql(\"STUDENT\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"lairger1928@cuvox.de\",\r\n  \"password\": \"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/sign-in",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "All Users [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Student presents in the list\", function () {\r",
							"    const users = pm.response.json();\r",
							"    const StudentId = Number(pm.environment.get(\"StudentID\") );\r",
							"    const studentPresent = users.some(user => user.id === StudentId);\r",
							"    });\r",
							"\r",
							"\r",
							"    \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{BaseURL}}/users",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Quiz [T]",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// let quizId = Math.floor(Date.now() / 1000);\r",
							"// pm.environment.set(\"quizId\", quizId);\r",
							"\r",
							"// // var num = new Date().getMilliseconds();\r",
							"// // var quizId = num.toString();\r",
							"// // pm.environment.set(\"QuizID\", quizId);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"QuizID\", jsonData.id);\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"ZZ API Variable\",\r\n  \"totalScore\": 18,\r\n  \"passingPercentage\": 75,\r\n  \"showStopperQuestion\": 1,\r\n  \"questions\": [\r\n    {\r\n      \"type\": \"TEXTUAL\",\r\n      \"question\": \"What is your name?\",\r\n      \"score\": 5\r\n    },\r\n    {\r\n      \"type\": \"SINGLE_CHOICE\",\r\n      \"question\": \"Which city is city largest in California?\",\r\n      \"score\": 7,\r\n      \"answer\": 2,\r\n      \"hasOtherOption\": false,\r\n      \"options\": [\r\n        \"San Francisco\",\r\n        \"Sacramento\",\r\n        \"Los Angeles\",\r\n        \"Redding\"\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"MULTIPLE_CHOICE\",\r\n      \"question\": \"Who was apple founded by?\",\r\n      \"score\": 6,\r\n      \"answers\": [\r\n        0,\r\n        1,\r\n        2\r\n      ],\r\n      \"hasOtherOption\": true,\r\n      \"options\": [\r\n        \"Steve Jobs\",\r\n        \"Steve Wozniak\",\r\n        \"Ronald Wayne\",\r\n        \"Ronald Reagan\"\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/quiz",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"quiz"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Quiz [T]",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"ZZ API Variable Updated\",\r\n  \"totalScore\": 18,\r\n  \"passingPercentage\": 75,\r\n  \"showStopperQuestion\": 1,\r\n  \"questions\": [\r\n    {\r\n      \"type\": \"TEXTUAL\",\r\n      \"question\": \"What is your name?\",\r\n      \"score\": 5\r\n    },\r\n    {\r\n      \"type\": \"SINGLE_CHOICE\",\r\n      \"question\": \"Which city is city largest in California?\",\r\n      \"score\": 7,\r\n      \"answer\": 2,\r\n      \"hasOtherOption\": false,\r\n      \"options\": [\r\n        \"San Francisco\",\r\n        \"Sacramento\",\r\n        \"Los Angeles\",\r\n        \"Redding\"\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"MULTIPLE_CHOICE\",\r\n      \"question\": \"Who was apple founded by?\",\r\n      \"score\": 6,\r\n      \"answers\": [\r\n        0,\r\n        1,\r\n        2\r\n      ],\r\n      \"hasOtherOption\": true,\r\n      \"options\": [\r\n        \"Steve Jobs\",\r\n        \"Steve Wozniak\",\r\n        \"Ronald Wayne\",\r\n        \"Ronald Reagan\"\r\n      ]\r\n    }\r\n  ],\r\n  \"id\": {{QuizID}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/quiz",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"quiz"
					]
				}
			},
			"response": []
		},
		{
			"name": "All Quizes [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// let myQuiz = pm.environment.get(\"QuizID\");\r",
							"\r",
							"// pm.test(\"Verify quiz id and updated quiz title\"), function() {\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData[jsonData.length - 1].id).to.eql(myQuiz);\r",
							"// };\r",
							"\r",
							"const myQuiz = Number(pm.environment.get(\"QuizID\"));\r",
							"pm.test(\"Quiz with my ID is present\"), function() {\r",
							"    const quizes = pm.response.json()\r",
							"    const quizquizExists = quizes.find(q => q.id === myQuiz)\r",
							"    pm.expect(quizquizExists).to.be.true\r",
							"};\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{BaseURL}}/quizzes",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"quizzes"
					],
					"query": [
						{
							"key": "role",
							"value": "TEACHER",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "New Assignment [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()[0];\r",
							"console.log(jsonData); \r",
							"pm.environment.set(\"AssignmentId\", jsonData.id);\r",
							"pm.environment.set(\"AssignmentGroupID\", jsonData.assignmentGroupID);\r",
							"\r",
							"\r",
							"pm.test(\"200 Status Code Check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"pm.test(\"Verify status, result and gradedBy brfore submition\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].status).to.eql(\"ASSIGNED\");\r",
							"    pm.expect(jsonData[0].result).to.eql(\"PENDING\");\r",
							"    pm.expect(jsonData[0].gradedBy).to.eql(\"NONE\");\r",
							"\r",
							"});\r",
							"\r",
							"// pm.expect(jsonData[jsonData.length - 1].status).to.eql(ASSIGNED);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"quizId\": {{QuizID}},\r\n  \"userIds\": [{{StudentID}}]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/assignment",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"assignment"
					]
				}
			},
			"response": []
		},
		{
			"name": "All Assignments [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"My Assignment is presented and has status ASSIGNED\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    const AssignmentId = Number(pm.environment.get(\"AssignmentId\"));\r",
							"\r",
							"    pm.expect(jsonData[jsonData.length - 1].status).to.eql(\"ASSIGNED\");\r",
							"    pm.expect(jsonData[jsonData.length - 1].id).to.eql(AssignmentId);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{BaseURL}}/assignments",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"assignments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Assignment [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"My Assignment is presented and has status ASSIGNED\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    const AssignmentId = Number(pm.environment.get(\"AssignmentId\"));\r",
							"\r",
							"    pm.expect(jsonData[jsonData.length - 1].status).to.eql(\"ASSIGNED\");\r",
							"    const myAssignment = jsonData.find(a => a.id === AssignmentId);\r",
							"    pm.expect(myAssignment).to.not.be.undefined; ;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{StudentToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{BaseURL}}/my-assignments",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"my-assignments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit Assignment [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify my Assignment's id, status, result, gradedBy\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    const AssignmentId = Number(pm.environment.get(\"AssignmentId\"));\r",
							"    const myAssignment = jsonData.find(a => a.id === AssignmentId);\r",
							"     pm.expect(myAssignment).to.not.be.undefined;\r",
							"\r",
							"    pm.expect(jsonData[jsonData.length -1].status).to.eql(\"GRADED\");\r",
							"    pm.expect(jsonData[jsonData.length - 1].result).to.eql(\"PASSED\");\r",
							"    pm.expect(jsonData[jsonData.length - 1].gradedBy).to.eql(\"AUTOMATIC\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{StudentToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n  \"assignmentId\": {{AssignmentId}},\r\n  \"answers\": [\r\n    {\r\n      \"textAnswer\": \"dfsdfsd\",\r\n      \"answer\": null\r\n    },\r\n    {\r\n      \"textAnswer\": \"\",\r\n      \"answer\": 2\r\n    },\r\n    {\r\n      \"textAnswer\": \"\",\r\n      \"answer\": [\r\n        1,\r\n        2,\r\n        0\r\n      ]\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/submit-assignment",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"submit-assignment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Grade Assignment [T]",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"summary\": \"Summary from teacher\",\r\n  \"result\": \"PASSED\",\r\n  \"grades\": [\r\n    {\r\n      \"comment\": \"Teacher comment\",\r\n      \"additionalScore\": 5\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/assignment/:assignmentId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"assignment",
						":assignmentId"
					],
					"variable": [
						{
							"key": "assignmentId",
							"value": "{{AssignmentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Grades [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{StudentToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{BaseURL}}/my-grades",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"my-grades"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Quiz [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"QuizID:\", pm.environment.get(\"QuizID\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/quiz/{{QuizID}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"quiz",
						"{{QuizID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Assignment [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/assignment/{{AssignmentGroupID}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"assignment",
						"{{AssignmentGroupID}}"
					]
				}
			},
			"response": []
		}
	]
}